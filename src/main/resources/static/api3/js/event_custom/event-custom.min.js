+function ($) {
    "use strict";
    var EC = EC || {};
    var doc;
    var _default = {
        hasVueRender: true,
        devMode: false,
        requestTime: 3e3,
        couponApiUrl: {
            coupon: "/event3/main/issueDeviceCheckingCoupon",
            timeAttack: "/event3/main/issueTimeAttackCoupon",
            epilogue: "/event3/main/getRealEpilogueEventList",
            hasOrder: "/v1/users/hasOrder"
        },
        getDomain(key) {
            var keys = key.split("/");
            var _d = EC.domain[keys[0]] || EC.domain.event;
            return _d[keys[1]] || _d.release
        },
        domain: {
            planning: {
                dev: "https://dev-web-exhibition.goodchoice.kr",
                stage: "https://stage-web-exhibition.goodchoice.kr",
                release: "https://web-exhibition.goodchoice.kr"
            },
            event: {
                dev: "https://api3.dev.abouthere.kr",
                stage: "https://standby-api3.goodchoice.kr/",
                release: "https://api3.goodchoice.kr"
            },
            mango: {
                dev: "https://api-dev-gw.goodchoice.kr",
                stage: "https://api-stage-gw.goodchoice.kr",
                release: "https://api-gw.goodchoice.kr"
            }
        },
        message: {
            success: "<b>할인쿠폰 도착!</b><br>" + "<br>" + "쿠폰함에서 쿠폰 상세조건을<br>" + "확인하세요.",
            messageFail400: "<b>선착순 수량이 지급 마감되었습니다.</b>",
            messageFail0: "<b>아쉽지만 쿠폰이 마감되었어요</b><br>" + "다시 도전해주세요!",
            messageFail4001: "<b>쿠폰 지급완료</b><br>" + "<br>" + "쿠폰을 이미<br>" + "지급받으셨습니다!" + "<br>" + "<br>" + "내 쿠폰함에서 확인하세요.",
            messageFail40012: "<b>쿠폰 지급완료</b><br>" + "<br>" + "다른기기 또는 다른 계정으로<br>" + "이미 받으셨습니다.",
            messageFail4002: "<b>아쉽지만 쿠폰이 마감되었어요.</b><br>" + "<br>" + "다음에 다시 도전해주세요!",
            messageLogin: "<b>쿠폰을 받으려면<br>" + "먼저 로그인 해주세요.",
            messageBefore: "<b>잠시만 기다려주세요.</b><br>" + "<br>" + "선착순 쿠폰<br>" + "준비중 입니다."
        }
    };
    var eventDefault = JSON.parse(decodeURIComponent(eDefaultString || ""));
    EC = Object.assign(_default, eventDefault, EC);
    EC.default = _default;
    EC.init = function () {
        doc = document
    }
        ;
    EC.isLogin = function () {
        return this.default.uno != 0 ? true : false
    }
        ;
    EC.animationMoveTo = function (pos = 0) {
        $("html, body").stop().animate({
            scrollTop: pos
        }, 300)
    }
        ;
    EC.animationMoveLastPosX = 0;
    EC.animationMoveX = function (target, pos = 0) {
        if (EC.animationMoveLastPosX == pos) {
            return false
        }
        EC.animationMoveLastPosX = pos;
        $(target).stop().animate({
            scrollLeft: pos
        }, 50);
        EC.animationMoveLastPosX = 1
    }
        ;
    EC.opacityElement = {
        show: function () {
            $(".opacity-element").fadeIn(100);
            $(window).bind("touchmove", function (e) {
                e.preventDefault()
            })
        },
        hide: function () {
            $(".opacity-element").fadeOut(150);
            $(window).unbind("touchmove")
        }
    };
    EC.deepLinkCheck = function (e) {
        if (EC.default.deviceType != "A") {
            if (e.preventDefault)
                e.preventDefault();
            deepLink();
            return false
        } else {
            return e || true
        }
    }
        ;
    EC.makeExpiredEvent = function () {
        var expItems = $("[data-expired-From], [data-expired-to]");
        expItems.each(function (i, o) {
            var isIng = EC.makeDoExpiredDate(o.getAttribute("data-expired-from"), o.getAttribute("data-expired-to"));
            if (isIng) {
                $(o).removeClass("d-none")
            } else {
                $(o).addClass("d-none");
                $(o).remove()
            }
        })
    }
        ;
    EC.makeDoExpiredDate = function (_from, _to) {
        var now = moment().valueOf();
        var startDate = moment(_from).valueOf();
        var endDate = moment(_to).valueOf();
        var isEnd = endDate - now;
        isEnd = isNaN(isEnd) ? false : Boolean(isEnd < 0);
        var isStart = now - startDate;
        isStart = isNaN(isStart) ? true : Boolean(isStart > 0);
        if (!isEnd && isStart) {
            return true
        } else {
            return false
        }
    }
        ;
    EC.coupon = {
        couponDetail: {},
        get: function (pData) {
            if (!pData.couponType) {
                return false
            }
            var _c = EC.coupon;
            var couponDetail = EC.default.couponCodes[pData.couponType] || {};
            couponDetail.couponType = pData.couponType;
            couponDetail.couponApi = pData.couponApi || couponDetail.couponApi || "coupon";
            _c.couponDetail = couponDetail;
            var options = {
                beforesend: function () {
                    EC.opacityElement.show()
                }
            };
            var apiFunc = undefined;
            if (_c.couponDetail.couponApi === "timeAttack") {
                apiFunc = function () {
                    return EC.api.issueTimeAttackCoupon(_c.couponDetail.code, options)
                }
            } else if (_c.couponDetail.couponApi === "coupon") {
                apiFunc = function () {
                    return EC.api.issueDeviceCheckingCoupon(_c.couponDetail.code, options)
                }
            } else {
                console.log("%cUndefined coupon API type", "background-color:red;color:#FFF;font-weight:bold;padding:2px 5px;");
                return false
            }
            $.when(apiFunc()).then(function (res) {
                EC.coupon.afterSuccess(res)
            }).fail(function () {
                EC.coupon.afterError()
            }).done(function () {
                EC.opacityElement.hide()
            })
        },
        afterSuccess(res) {
            if (res.rtv == false) {
                switch (res.code) {
                    case 0:
                        EC.default.message.messageFail0 = res.msg;
                        EC.messages.messageFail0(this.couponDetail.couponType);
                        break;
                    case 400:
                        EC.messages.messageFail400(this.couponDetail.couponType);
                        break;
                    case 4001:
                        EC.default.couponCodes[this.couponDetail.couponType].issued = true;
                        EC.messages.messageFail4001(this.couponDetail.couponType);
                        break;
                    case 4002:
                        EC.messages.messageFail4002(this.couponDetail.couponType);
                        break;
                    case 40012:
                        EC.messages.messageFail40012(this.couponDetail.couponType);
                        break;
                    default:
                        popup.show(res.msg);
                        break
                }
                return false
            } else {
                EC.messages.messageSuccess(this.couponDetail.couponType);
                EC.default.couponCodes[this.couponDetail.couponType].issued = true
            }
        },
        afterError() {
            console.log("에러")
        }
    };
    EC.messages = {
        getMessageByCouponType: function (couponType, messageType) {
            var messages = this[couponType] || EC.default.message;
            return messages[messageType] || EC.default.message[messageType]
        },
        messageSuccess: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "success"), [{
                text: "닫기",
                onclick: "popup.close();"
            }, {
                text: "쿠폰함 가기",
                onclick: "go.couponList();"
            }])
        },
        messageFail0: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageFail0"), [{
                text: "닫기",
                onclick: "popup.close();"
            }])
        },
        messageFail400: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageFail400"), [{
                text: "닫기",
                onclick: "popup.close();"
            }])
        },
        messageFail4001: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageFail4001"), [{
                text: "닫기",
                onclick: "popup.close();"
            }, {
                text: "쿠폰함 가기",
                onclick: "go.couponList();"
            }])
        },
        messageFail40012: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageFail40012"), [{
                text: "닫기",
                onclick: "popup.close();"
            }, {
                text: "쿠폰함 가기",
                onclick: "go.couponList();"
            }])
        },
        messageFail4002: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageFail4002"), [{
                text: "닫기",
                onclick: "popup.close();"
            }])
        },
        messageLogin: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageLogin"), [{
                text: "닫기",
                onclick: "popup.close();"
            }, {
                text: "로그인",
                onclick: "go.login();"
            }])
        },
        messageBefore: function (couponType) {
            popup.show(this.getMessageByCouponType(couponType, "messageBefore"), [{
                text: "닫기",
                onclick: "popup.close();"
            }])
        }
    };
    EC.vue = {
        timer: undefined,
        isVueLoading: false,
        initCheck: function () {
            this.setTimer();
            setTimeout(function () {
                EC.vue.isVueLoading = true;
                EC.vue.clearTimer()
            }, 3e3)
        },
        setTimer() {
            this.timer = setInterval(this.doTimer, 1)
        },
        clearTimer() {
            if (this.timer) {
                clearInterval(this.timer);
                this.timer = undefined;
                this.doCallback()
            }
        },
        doTimer() {
            if (EC.vue.isVueLoading) {
                EC.vue.clearTimer();
                return false
            }
            var _show = $(".event-vue__show").length || 0;
            var _mainP = $(".event-vue .main-product .sub_0").length || 0;
            var _subP = $(".event-vue .sub-product .sub_0").length || 0;
            if (_show + _mainP + _subP > 0) {
                EC.vue.isVueLoading = true
            }
        },
        doCallback() {
            if (typeof window.vueMountedCallback === "function") {
                window.vueMountedCallback()
            }
        }
    };
    EC.navigationScroll = {
        consoleStyle: "background-color:orange; color:#481717; padding:3px 10px; font-style:italic;",
        consoleStyleError: "background-color:#2A0000; color:#F17878; padding:3px 10px; font-style:italic;",
        isInit: true,
        isScrollX: false,
        el: {
            container: ".navigation-scroll-container",
            navContainer: ".navigation-nav",
            nav: ".navigation-nav ul",
            contents: ".navigation-items",
            singleBgImages: "navigation-image-single"
        },
        $el: {
            container: undefined,
            navContainer: undefined,
            nav: undefined,
            contents: undefined,
            btns: undefined,
            singleBgImages: undefined
        },
        init() {
            if (!this.isInit) {
                return false
            }
            this.$el.container = $(this.el.container);
            if (!this.$el.container) {
                return false
            }
            this.$el.navContainer = this.$el.container.find(this.el.navContainer);
            this.$el.nav = this.$el.container.find(this.el.nav);
            this.$el.contents = this.$el.container.find(this.el.contents);
            this.$el.btns = this.$el.nav.find("a");
            if (!this.$el.btns || this.$el.btns.length == 0) {
                return false
            }
            var _ncSingle = this.$el.navContainer.hasClass(this.el.singleBgImages);
            if (_ncSingle) {
                this.$el.singleBgImages = this.$el.navContainer.find(".bg-image img");
                this.$el.singleBgImages[0].classList.add("active")
            }
            this.$el.container.addClass("navigation__installed");
            this.makeBtns();
            console.log("%c EC.navigationScroll (scroll 형 네비게이션) installed :)", EC.navigationScroll.consoleStyle)
        },
        destroy() {
            var _this = this;
            _this.$el.btns.each(function (i, o) {
                o.addEventListener("click", _this.clickBtn)
            });
            window.removeEventListener("scroll", _this.scroll);
            console.log("%c EC.navigationScroll (scroll 형 네비게이션) destroyed :(", EC.navigationScroll.consoleStyle)
        },
        navMakeInterval: undefined,
        navMakePadding() {
            var navH = Math.max(this.$el.nav.innerHeight() || 0, this.$el.navContainer.innerHeight() || 0);
            this.$el.navContainer.css({
                width: this.$el.container.innerWidth()
            });
            this.$el.container.css({
                "padding-top": navH
            })
        },
        makeBtns() {
            var _t = EC.navigationScroll;
            var btnwidth = 0;
            this.$el.btns.each(function (i, o) {
                btnwidth += o.clientWidth;
                var targetEl = $(o).attr("href");
                o.targetEl = {
                    el: targetEl,
                    $el: $(targetEl)
                };
                if (_t.$el.singleBgImages) {
                    o.targetEl.$bg = $(_t.$el.singleBgImages[i])
                }
                o.targetEl.posT = function () {
                    return o.targetEl.$el.offset().top
                }
                    ;
                o.targetEl.posB = function () {
                    return o.targetEl.posT() + o.targetEl.$el.innerHeight()
                }
                    ;
                o.addEventListener("click", function (e) {
                    if (e && e.preventDefault)
                        e.preventDefault();
                    var movePos = this.targetEl.posT();
                    var navH = _t.$el.nav.innerHeight();
                    EC.animationMoveTo(movePos - navH + 2)
                })
            });
            if (btnwidth > document.body.clientWidth) {
                _t.isScrollX = true
            }
            this.navMakePadding();
            window.addEventListener("scroll", this.scroll)
        },
        getLeftPos(_btnIndex) {
            var w = 0;
            for (var _i = 0; _i < _btnIndex; _i++) {
                w += $(this.$el.btns[_i]).outerWidth()
            }
            return w
        },
        scroll() {
            var _t = EC.navigationScroll;
            var windowScrollY = window.scrollY;
            var navH = _t.$el.nav.innerHeight();
            var _ct = _t.$el.container.offset().top;
            var _cb = _ct + _t.$el.container.innerHeight() - navH;
            var isFixed = _ct < windowScrollY;
            var isAbsolute = _ct < windowScrollY && windowScrollY > _cb;
            _t.navMakePadding();
            _t.$el.container.toggleClass("navigation__fixed", isFixed);
            _t.$el.container.toggleClass("navigation__absolute", isAbsolute);
            var activeIdx = 0;
            _t.$el.btns.each(function (i, o) {
                var activeTopPos = o.targetEl.posT() - navH - 1;
                var activeBottomPos = o.targetEl.posB() - navH - 1;
                if (i == _t.$el.btns.length - 1) {
                    activeBottomPos += navH
                }
                var isActive = activeTopPos < windowScrollY && windowScrollY < activeBottomPos;
                if (isActive) {
                    if (_t.isScrollX) {
                        EC.animationMoveX(_t.$el.nav, _t.getLeftPos(i))
                    }
                    activeIdx++;
                    if (_t.$el.singleBgImages) {
                        _t.$el.singleBgImages.each(function (_i, _o) {
                            var _isActive = i === _i;
                            $(_o).toggleClass("active", _isActive)
                        })
                    }
                }
                $(o).toggleClass("active", isActive)
            });
            if (activeIdx == 0) {
                _t.$el.btns[0].classList.add("active")
            }
        }
    };
    EC.navigationTab = {
        consoleStyle: "background-color:orange; color:#481717; padding:3px 10px; font-style:italic;",
        consoleStyleError: "background-color:#2A0000; color:#F17878; padding:3px 10px; font-style:italic;",
        isInit: true,
        el: {
            container: ".navigation-tab-container",
            navContainer: ".navigation-nav",
            nav: ".navigation-nav ul",
            contents: ".navigation-items",
            singleBgImages: "navigation-image-single"
        },
        $el: {
            container: undefined,
            navContainer: undefined,
            nav: undefined,
            contents: undefined,
            btns: undefined,
            activeItem: undefined,
            singleBgImages: undefined
        },
        init() {
            if (!this.isInit) {
                return false
            }
            this.$el.container = $(this.el.container);
            if (!this.$el.container) {
                return false
            }
            this.$el.navContainer = this.$el.container.find(this.el.navContainer);
            this.$el.nav = this.$el.container.find(this.el.nav);
            this.$el.contents = this.$el.container.find(this.el.contents);
            this.$el.btns = this.$el.nav.find("a");
            if (!this.$el.btns || this.$el.btns.length == 0) {
                return false
            }
            var _ncSingle = this.$el.navContainer.hasClass(this.el.singleBgImages);
            if (_ncSingle) {
                this.$el.singleBgImages = this.$el.navContainer.find(".bg-image img");
                this.$el.singleBgImages[0].classList.add("active")
            }
            this.$el.container.addClass("navigation__installed");
            this.makeBtns();
            console.log("%c EC.navigationTab (on,off 형 네비게이션) installed :)", EC.navigationTab.consoleStyle)
        },
        destroy() {
            var _this = this;
            _this.$el.btns.each(function (i, o) {
                o.addEventListener("click", _this.clickBtn)
            });
            window.removeEventListener("scroll", _this.scroll);
            console.log("%c EC.navigationTab (on,off 형 네비게이션) destroyed :(", EC.navigationTab.consoleStyle)
        },
        navMakeInterval: undefined,
        navMakePadding() {
            var navH = Math.max(this.$el.nav.innerHeight() || 0, this.$el.navContainer.innerHeight() || 0);
            this.$el.navContainer.css({
                width: this.$el.container.innerWidth()
            });
            this.$el.container.css({
                "padding-top": navH
            })
        },
        makeBtns() {
            var _t = EC.navigationTab;
            this.$el.btns.each(function (i, o) {
                var targetEl = $(o).attr("href");
                o.targetEl = {
                    el: targetEl,
                    $el: $(targetEl)
                };
                if (_t.$el.singleBgImages) {
                    o.targetEl.$bg = $(_t.$el.singleBgImages[i])
                }
                o.targetEl.posT = function () {
                    return _t.$el.container.offset().top
                }
                    ;
                o.targetEl.posB = function () {
                    return o.targetEl.posT() + o.targetEl.$el.innerHeight()
                }
                    ;
                o.addEventListener("click", function (e) {
                    if (e && e.preventDefault)
                        e.preventDefault();
                    _t.activeItems(i);
                    EC.animationMoveTo(o.targetEl.posT())
                })
            });
            _t.activeItems(0);
            this.navMakePadding();
            window.addEventListener("scroll", this.scroll)
        },
        activeItems(idx) {
            var _t = EC.navigationTab;
            _t.$el.btns.each(function (i, o) {
                var _btn = $(o);
                var _item = o.targetEl.$el;
                if (idx == i) {
                    _btn.addClass("active");
                    _item.addClass("active");
                    _t.$el.activeItem = o;
                    if (_t.$el.singleBgImages) {
                        o.targetEl.$bg.addClass("active")
                    }
                } else {
                    _btn.removeClass("active");
                    _item.removeClass("active");
                    if (_t.$el.singleBgImages) {
                        o.targetEl.$bg.removeClass("active")
                    }
                }
            })
        },
        scroll() {
            var _t = EC.navigationTab;
            var windowScrollY = window.isEnterRealEpilogueEventscrollY;
            var _item = _t.$el.activeItem.targetEl;
            var isFixed = _item.posT() < windowScrollY;
            var isAbsolute = _item.posT() < windowScrollY && windowScrollY > _item.posB();
            _t.navMakePadding();
            _t.$el.container.toggleClass("navigation__fixed", isFixed);
            _t.$el.container.toggleClass("navigation__absolute", isAbsolute)
        }
    };
    EC.api = {
        consoleStyle: "background-color:yellowgreen; color:#000; padding:3px 10px; font-style:italic;",
        consoleStyleError: "background-color:#2A0000; color:#F17878; padding:3px 10px; font-style:italic;",
        isEnterRealEpilogueEvent(params, options) {
            params = params || {};
            options = options || {};
            var deferred = new $.Deferred;
            var uno = params.uno || EC.uno;
            var eventNo = params.eventNo || EC.eventNo;
            if (uno === 0) {
                console.error(`%cEC.api.isEnterRealEpilogueEvent() uno is undefined`, EC.api.consoleStyleError);
                deferred.reject();
                return false
            }
            $.ajax({
                type: "POST",
                cache: false,
                beforeSend: options.beforesend,
                url: "/event3/main/isEnterRealEpilogueEvent",
                dataType: "json",
                data: Object.assign({
                    uno: uno,
                    re_aevno: eventNo
                }, params),
                timeout: EC.requestTime,
                success: function (data) {
                    console.log(`%cEC.api.isEnterRealEpilogueEvent(${eventNo}, options): 영화이벤트 참여여부 확인`, EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (e) {
                    console.error(`%cEC.api.isEnterRealEpilogueEvent().isEnterRealEpilogueEvent`, EC.api.consoleStyleError);
                    deferred.reject(e)
                }
            });
            return deferred.promise()
        },
        getRealEpilogueEventList(params, options) {
            params = params || {};
            options = options || {};
            var deferred = new $.Deferred;
            var uno = params.uno || EC.uno;
            var eventNo = params.eventNo || EC.eventNo;
            if (!eventNo) {
                console.error(`%cEC.api.getRealEpilogueEventList() params.eventNo is undefined`, EC.api.consoleStyleError);
                deferred.reject();
                return false
            }
            $.ajax({
                type: "POST",
                cache: false,
                beforeSend: options.beforesend,
                url: "/event3/main/getRealEpilogueEventList",
                dataType: "json",
                data: Object.assign({
                    uno: uno,
                    aevno: eventNo,
                    page: 1,
                    limitCount: 5
                }, params),
                timeout: EC.requestTime,
                success: function (data) {
                    console.log(`%cEC.api.getRealEpilogueEventList(uno:${uno}, eno:${params.aevno}): 영화이벤트 리스트`, EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (e) {
                    console.error(`%cEC.api.getRealEpilogueEventList().getRealEpilogueEventList`, EC.api.consoleStyleError);
                    deferred.reject(e)
                }
            });
            return deferred.promise()
        },
        setRealEpilogueEvent(params, options) {
            params = params || {};
            options = options || {};
            var deferred = new $.Deferred;
            $.ajax({
                type: "POST",
                cache: false,
                beforeSend: options.beforesend,
                url: "/event3/main/setRealEpilogueEvent",
                dataType: "json",
                data: Object.assign({
                    name: params.name || "-",
                    tel: params.tel || "-",
                    uno: params.uno || EC.uno,
                    re_aevno: params.eventNo || EC.eventNo,
                    comment: params.comment || "-",
                    option: params.option || "-"
                }, params),
                timeout: EC.requestTime,
                success: function (data) {
                    console.log("%cEC.api.setRealEpilogueEvent(params, options): 영화이벤트 insert", EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (e) {
                    console.error(`%cEC.api.setRealEpilogueEvent().setRealEpilogueEvent`, EC.api.consoleStyleError);
                    deferred.reject(e)
                }
            });
            return deferred.promise()
        },
        setAgreementMarketingKto(params, options) {
            params = params || {};
            options = options || {};
            var deferred = new $.Deferred;
            $.ajax({
                type: "POST",
                cache: false,
                beforeSend: options.beforesend || function (xhr) {
                    xhr.setRequestHeader("Authorization", EC.token)
                }
                ,
                url: "/v1/users/agreementMarketingKto",
                dataType: "json",
                data: Object.assign({
                    marketingKto: params.marketingKto || "Y"
                }, params),
                timeout: EC.requestTime,
                success: function (data) {
                    console.log("%cEC.api.setAgreementMarketingKto(params, options): 마케팅 수신동의 업데이트", EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (e) {
                    console.error(`%cEC.api.setAgreementMarketingKto().agreementMarketingKto`, EC.api.consoleStyleError);
                    deferred.reject(e)
                }
            });
            return deferred.promise()
        },
        issueDeviceCheckingCoupon(couponCodes, options) {
            console.log("%cEC.api.issueDeviceCheckingCoupon(" + couponCodes + "): 쿠폰발급시작", EC.api.consoleStyle);
            options = options || {};
            var ajaxData = {
                aevno: EC.eventNo,
                uno: EC.uno,
                coupon_string: couponCodes,
                coupon_string_type: "cpn_code",
                deviceId: EC.deviceId
            };
            var deferred = new $.Deferred;
            $.ajax({
                type: "POST",
                cache: false,
                beforeSend: options.beforesend,
                url: "/event3/main/issueDeviceCheckingCoupon",
                dataType: "json",
                data: ajaxData,
                success: function (data) {
                    console.log("%cEC.api.issueDeviceCheckingCoupon(" + couponCodes + "): 쿠폰발급", EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (data) {
                    console.error(`%cEC.api.issueDeviceCheckingCoupon().issueDeviceCheckingCoupon`, EC.api.consoleStyleError);
                    deferred.reject(data)
                }
            });
            return deferred.promise()
        },
        issueTimeAttackCoupon(couponCodes, options) {
            console.log("%cEC.api.issueTimeAttackCoupon(" + couponCodes + "): 타임어택 쿠폰발급 시작", EC.api.consoleStyle);
            options = options || {};
            var ajaxData = {
                aevno: EC.eventNo,
                uno: EC.uno,
                coupon_string: couponCodes,
                coupon_string_type: "cpn_code",
                deviceId: EC.deviceId
            };
            var deferred = new $.Deferred;
            $.ajax({
                type: "POST",
                cache: false,
                beforeSend: options.beforesend,
                url: "/event3/main/issueTimeAttackCoupon",
                dataType: "json",
                data: ajaxData,
                success: function (data) {
                    console.log("%cEC.api.issueTimeAttackCoupon(" + couponCodes + "): 타임어택 쿠폰발급", EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (data) {
                    console.error(`%cEC.api.issueTimeAttackCoupon().issueTimeAttackCoupon`, EC.api.consoleStyleError);
                    deferred.reject(data)
                }
            });
            return deferred.promise()
        },
        couponGatewayEnv: {
            development: "https://dev-api-gw.abouthere.kr",
            stage: "https://stage-api-gw.goodchoice.kr",
            standby: "https://stage-api-gw.goodchoice.kr",
            release: "https://api-gw.goodchoice.kr",
            production: "https://api-gw.goodchoice.kr"
        },
        couponGatewayService: {
            coupon: "/auth-coupons/issues",
            coupons: "/auth-coupons/multi-issues",
            timeAttack: "/auth-coupons/time-attack/issues"
        },
        couponUrlGet(env, service) {
            return this.couponGatewayEnv[EC.env] + this.couponGatewayService[service]
        },
        couponIssuesData(coupons) {
            var _coupons = typeof coupons === "string" ? coupons : coupons.join(",");
            return {
                ajaxData: {
                    policyIds: _coupons,
                    policyId: _coupons
                },
                options: {
                    beforesend(xhr) {
                        xhr.setRequestHeader("Authorization", EC.token);
                        xhr.setRequestHeader("X-User-Id", EC.uno);
                        xhr.setRequestHeader("X-Device-Id", EC.deviceId)
                    }
                }
            }
        },
        couponDeferred({ methods, options, url, ajaxData, consoleText }) {
            var deferred = new $.Deferred;
            $.ajax({
                type: methods,
                cache: false,
                beforeSend: options.beforesend,
                url: url,
                dataType: "json",
                data: ajaxData,
                success: function (data) {
                    console.log(`%c${consoleText}`, EC.api.consoleStyle, data);
                    deferred.resolve(data)
                },
                error: function (data) {
                    console.error(`%c${consoleText}`, EC.api.consoleStyleError);
                    deferred.reject(data)
                }
            });
            return deferred.promise()
        },
        couponIssuesMultiGet(coupons) {
            var data = this.couponIssuesData(coupons);
            data.url = this.couponUrlGet(EC.env, "coupons");
            data.methods = "GET";
            data.consoleText = `EC.api.couponIssuesMultiGet('${data.ajaxData.policyIds}')`;
            return this.couponDeferred(data)
        },
        couponIssuesMultiPost(coupons) {
            var data = this.couponIssuesData(coupons);
            data.url = this.couponUrlGet(EC.env, "coupons");
            data.methods = "POST";
            data.consoleText = `EC.api.couponIssuesMultiPost('${data.ajaxData.policyIds}')`;
            return this.couponDeferred(data)
        },
        couponIssuesGet(coupon) {
            var data = this.couponIssuesData(coupon);
            data.url = this.couponUrlGet(EC.env, "coupon");
            data.methods = "GET";
            data.consoleText = `EC.api.couponIssuesGet('${data.ajaxData.policyId}')`;
            return this.couponDeferred(data)
        },
        couponIssuesPost(coupon) {
            var data = this.couponIssuesData(coupon);
            data.url = this.couponUrlGet(EC.env, "coupon");
            data.methods = "POST";
            data.consoleText = `EC.api.couponIssuesPost('${data.ajaxData.policyId}')`;
            return this.couponDeferred(data)
        },
        timeAttackIssuesGet(coupon) {
            var data = this.couponIssuesData(coupon);
            data.url = this.couponUrlGet(EC.env, "timeAttack");
            data.methods = "GET";
            data.consoleText = `EC.api.timeAttackIssuesGet('${data.ajaxData.policyId}')`;
            return this.couponDeferred(data)
        },
        timeAttackIssuesPost(coupon) {
            var data = this.couponIssuesData(coupon);
            data.url = this.couponUrlGet(EC.env, "timeAttack");
            data.methods = "POST";
            data.consoleText = `EC.api.timeAttackIssuesPost('${data.ajaxData.policyId}')`;
            return this.couponDeferred(data)
        }
    };
    EC.filter = {
        numberToComma(x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        }
    };
    EC.href = {
        brazeCnt: undefined,
        loadBraze({ brazeName, brazeIdx }) {
            brazeName = brazeName || "pageButton" + EC.eventNo;
            if (brazeIdx) {
                brazeName += "_" + brazeIdx
            }
            evtBraze.action(brazeName, evtBraze.eventBrazeRootTagName)
        },
        schema(schema, brazeIdx) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            if (typeof schema == "object") {
                var _schema = schema;
                schema = _schema.schema;
                brazeIdx = _schema.brazeIdx
            }
            this.loadBraze({
                brazeIdx: brazeIdx
            });
            location.href = schema
        },
        detailAffiliate(ano, brazeIdx) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            if (typeof ano == "object") {
                var _ano = ano;
                brazeIdx = _ano.brazeIdx;
                ano = _ano.ano
            }
            this.loadBraze({
                brazeIdx: brazeIdx
            });
            location.href = "yeogi://details?schemetype=detail&anim=2&ano=" + ano
        },
        detailEvent(eno, title, brazeIdx) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            if (typeof eno == "object") {
                var _eno = eno;
                eno = _eno.eno;
                title = _eno.title;
                brazeIdx = _eno.brazeIdx
            }
            var domain = EC.getDomain("event");
            if (EC.env == "development" || EC.env == "local") {
                domain = EC.getDomain("event/dev")
            } else if (EC.env == "staging" || EC.env == "standby") {
                domain = EC.getDomain("event/stage")
            }
            this.loadBraze({
                brazeIdx: brazeIdx
            });
            location.href = `yeogi://details?schemetype=eventdetail&anim=2&title=${title}&url=${domain}/event3/main/adEventView?aevno=${eno}`
        },
        mango(mangoUrl, title) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            title = title || "";
            var mangoGateUrl = "yeogi://details?schemetype=eventdetail&anim=1&title=" + title;
            var mangoGateDomain = EC.getDomain("mango");
            if (EC.env == "development" || EC.env == "local") {
                mangoGateDomain = EC.getDomain("mango/dev")
            } else if (EC.env == "staging") {
                mangoGateDomain = EC.getDomain("mango/stage")
            }
            var mangoGateUrl2 = `&isHistoryBack=true&isEncodeUrl=true&url=${mangoGateDomain}/v3/outbound?landingURL=`;
            var moveUrls = mangoUrl.split("?");
            var moveUrl = encodeURIComponent(moveUrls[0] + "?" + encodeURIComponent(moveUrls[1]));
            location.href = mangoGateUrl + mangoGateUrl2 + moveUrl
        },
        promotionPlan(pno) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            var domain = EC.getDomain("planning");
            if (EC.env == "development" || EC.env == "local") {
                domain = EC.getDomain("planning/dev")
            } else if (EC.env == "staging" || EC.env == "standby") {
                domain = EC.getDomain("planning/stage")
            }
            location.href = `yeogi://details?schemetype=webview&anim=2&title=&titletype=1&url=${domain}/planning/${pno}`
        },
        detailOuter(url) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            location.href = `yeogi://details?schemetype=url&anim=2&url=${url}`
        },
        kakaoShare(params) {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            this.loadBraze({
                brazeName: "kakaoShare" + EC.eventNo
            });
            location.href = EC.kakao.link;
            if (popup && popup.close) {
                popup.close()
            }
        },
        pushOn() {
            if (!EC.deepLinkCheck(this)) {
                return false
            }
            this.loadBraze({
                brazeName: "pushOn" + EC.eventNo
            });
            location.href = "yeogi://details?schemetype=setting";
            if (popup && popup.close) {
                popup.close()
            }
        }
    };
    EC.appShare = {
        options: {},
        data: {
            isAppShare: false,
            kakao: {
                title: EC.kakao.title,
                label: EC.kakao.label,
                linkUrl: EC.kakao.url,
                imgUrl: EC.kakao.img
            },
            sms: EC.kakao.label
        },
        init() {
            this.data = Object.assign(this.data, this.options);
            if (!this.data.isAppShare)
                return false;
            this.makeCallShare();
            this.evalAppFunc("makeShare")
        },
        makeCallShare() {
            window.callShare = function () {
                try {
                    EC.appShare.evalAppFunc("showShareDialog", {
                        kakao: EC.appShare.data.kakao
                    })
                } catch (e) { }
            }
        },
        evalAppFunc(_fn, _d) {
            try {
                if (EC.utils.typeCheck() === "A") {
                    if (_d) {
                        window.Android[_fn](JSON.stringify(_d))
                    } else {
                        window.Android[_fn]()
                    }
                } else {
                    if (_d) {
                        window.webkit.messageHandlers[_fn].postMessage(JSON.stringify(_d))
                    } else {
                        window.webkit.messageHandlers[_fn].postMessage("")
                    }
                }
            } catch (e) { }
        }
    };
    EC.actionBrazeLog = {
        init() {
            this.userLog();
            this.evtBraze();
            $("img.lazy").lazyload();
            $(".event-container").addClass("show")
        },
        actionLog: undefined,
        userLog() {
            if (EC.responseHeader && EC.responseHeader != "") {
                this.actionLog = new UserLog(EC.responseHeader)
            }
        },
        evtBraze() {
            evtBraze.init(EC.eventNo)
        }
    };
    EC.btn = {
        el: {},
        $el: {},
        data: {
            initScrollTop: true
        },
        init() { },
        scrollTop: {
            el: "",
            $el: "",
            data: {
                className: "button-top__opacity"
            },
            show() { }
        }
    };
    EC.utils = {
        scrollY() {
            return window.scrollY
        },
        scrollH() {
            return $(document).height()
        },
        scrollPos() {
            return $(window).height() + $(window).scrollTop()
        },
        typeCheck() {
            var ua = navigator.userAgent.toLowerCase()
                , isAndroid = ua.indexOf("android") > -1
                , isiOS = ua.match(/(iphone|ipod|ipad)/);
            return isAndroid ? "A" : isiOS ? "I" : "W"
        }
    };
    window.$ec = window.eventCustom = window.EC = EC;
    $(window).ready(function () {
        EC.init();
        EC.actionBrazeLog.init();
        $("[data-deepLink]").click(EC.deepLinkCheck);
        EC.makeExpiredEvent();
        EC.hasVueRender = $(".event-vue").length > 0 ? true : false;
        if (EC.hasVueRender) {
            EC.vue.initCheck()
        }
        EC.navigationScroll.init();
        EC.navigationTab.init();
        EC.appShare.init()
    })
}(jQuery);
